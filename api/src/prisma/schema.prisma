generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  email     String   @unique
  password  String
  onboarded Boolean  @default(false)

  school            String?
  grade             String?
  stream            String?
  subjects          String[] @default([])
  address           String?
  careerGoal        String?
  extracurriculars  String[] @default([])
  learningStyle     String?
  counsellingReason String?
  completedQuizzes  Quiz[]
  completedLessons  Lesson[]
  savedCareers      String[]

  chats Chat[]
}

model Chat {
  id           String     @id @default(uuid())
  studentId    String
  counsellorId String
  student      Student    @relation(fields: [studentId], references: [id])
  counsellor   Counsellor @relation(fields: [counsellorId], references: [id])
  messages     Message[]
  unseenCount  Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  chatId     String
  chat       Chat     @relation(fields: [chatId], references: [id])
  senderId   String
  receiverId String
  content    String
  seen       Boolean  @default(false)
  sender     String
  createdAt  DateTime @default(now())
}

model Lesson {
  id            Int             @id @default(autoincrement())
  category      String
  categoryTitle String
  title         String
  description   String
  content       LessonContent[]
  no            Int
  quizes        Quiz[]
  studentId     String?
  completedBy   Student?        @relation(fields: [studentId], references: [id])
}

model LessonContent {
  id       Int     @id @default(autoincrement())
  lessonId Int
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  sbh1     String?
  p1       String?
  sbh2     String?
  p2       String?
  sbh3     String?
  p3       String?
  sbh4     String?
  p4       String?
}

model QuizCategory {
  id      Int    @id @default(autoincrement())
  name    String @unique
  quizzes Quiz[]
}

model Quiz {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  category    QuizCategory @relation(fields: [categoryId], references: [id])
  lessonId    Int?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  questions   Question[]
  studentId   String?
  completedBy Student?     @relation(fields: [studentId], references: [id])
  score       Int?
}

model Question {
  id              Int      @id @default(autoincrement())
  quizId          Int
  quiz            Quiz     @relation(fields: [quizId], references: [id])
  text            String
  answers         Answer[]
  correctAnswerId Int? // Optional if thereâ€™s only one correct answer
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean
}

model Counsellor {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  name         String?
  email        String   @unique
  onboarded    Boolean  @default(false)
  specialities String[]
  location     String?
  experience   String?
  rating       Float?   @default(0)
  bio          String?
  password     String
  chats        Chat[]
  isVerified       Boolean  @default(false)
}

model Recruiter {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  username       String   @unique
  email          String   @unique
  onboarded      Boolean  @default(false)
  company        String?
  jobTitle       String?
  experience     String?
  hiringVolume   String?
  communication  String?
  additionalInfo String?
  password       String
  jobs           Job?
}

model Job {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  company      String
  location     String
  salary       String
  jobType      String
  description  String
  requirements String
  benefits     String
  isRemote     Boolean   @default(false)
  recruiter    Recruiter @relation(fields: [id], references: [id])
}

model CareerCategory {
  category String   @id @unique
  careers  Career[]
}

model Career {
  id           Int            @id @default(autoincrement())
  onetCode     String?
  title        String         @unique
  field        String
  potential    String
  trend        String
  salary       String
  skills       String[]
  education    String
  icon         String
  growth       Int
  satisfaction Float
  description  String?
  progression  String?
  resources    String[]
  categoryName String
  category     CareerCategory @relation(fields: [categoryName], references: [category])
}
